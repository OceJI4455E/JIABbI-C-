6.
Условие задачи
Создать абстрактный класс – «Геометрическая фигура» (на экране). Класс
содержит координаты геометрического центра фигуры на экране и следующие
поля: поле, задающее размер фигуры (например, расстояние от центра до
вершины или радиус окружности, в пикселях); поле, задающее угловое
положение фигуры; поле, задающее угловую скорость вращения фигуры; поле,
определяющее направление движения (возможны два варианта: движение по
вертикали и движение по горизонтали); поле, определяющее скорость
движения; поле, определяющее цвет фигуры; поле, содержащее хэндл окна для
рисования. При необходимости можно включить другие поля. Класс включает
в себя: конструктор для инициализации полей, функцию, изменяющую угловое
положение фигуры и положение на экране во время движения за один такт
времени, и чистую виртуальную функцию (или функции) для рисования и
стирания фигуры на экране.
Мое Условие:
9 Фигуры 1 - Отрезок, 2- окружность с вырезанной четвертью, 4- ромб.
 

Алгоритм Решения:
 Код включает необходимые заголовочные файлы и определяет несколько констант.
2. Объявляются глобальные переменные, включая дескриптор экземпляра, имена классов окон и дескриптор события.
3. Определены прототипы функций, используемых в коде.
4. Функция wWinMain является точкой входа приложения. Она инициализирует глобальные строки, регистрирует класс окна и создает окно.
5. Функция WndProc является обработчиком сообщений для окна. В ней обрабатываются различные сообщения, такие как WM_CREATE, WM_PAINT и WM_DESTROY.
6. Функция InitInstance создает и отображает окно приложения.
7. Функция WinMain выполняет инициализацию приложения, создает главное окно и запускает цикл обработки сообщений.
8. Внутри функции WinMain происходит создание и инициализация экземпляра приложения, регистрация класса окна, создание окна, получение и обработка сообщений до тех пор, пока не будет получено сообщение WM_QUIT.
9. Функция RegisterWindowClass регистрирует класс окна с помощью структуры WNDCLASSEX.
10. Функция CreateMainWindow создает главное окно приложения с помощью функции CreateWindowEx.
11. Функция ShowMainWindow отображает главное окно и обновляет его.
12. Функция MessageLoop запускает цикл обработки сообщений, в котором получаются и обрабатываются сообщения из очереди.
13. Функция Cleanup освобождает ресурсы, связанные с приложением.

7.
Условие Задачи

Работа состоит из двух частей. В первой части разработанное в
лабораторной работе 6 приложение следует преобразовать таким образом: для
обеспечения движения геометрических фигур в окне вместо таймера нужно
использовать потоки. Для каждой геометрической фигуры используется.
 Результаты работы многопоточной программы с синхронизацией
отдельный поток. Потоковая функция должна быть одна. В качестве параметра
в потоковую функцию передается указатель на объект «Фигура». При
необходимости использовать синхронизацию. В примере представлено
приложение Windows с графическим интерфейсом пользователя.
Во второй части обеспечивается синхронизация двух приложений.
Первое приложение. Приложение с потоками нужно преобразовать так,
чтобы движение фигур в потоках начиналось не сразу, а после получения
сигнала от второго приложения. При получения сигнала потоки начинают
работать до тех пор, пока от второго приложения не придет другой сигнал, при
получении этого сигнала потоки завершают свою работу.
Второе приложение — консольное приложение Windows (запускается
только при запущенном первом приложении). После нажатия клавиши
посылается сигнал для начала работы потоков в первом приложении. После
следующего нажатия клавиши посылается сигнал для завершения работы
потоков в первом приложении.
Далее демонстрируется совместная работа двух приложений.
Внешний вид главного окна первого приложения аналогичен окну,
представленному на рисунке (лабораторная работа 6).
Условие задачи приведено в лабораторной работе 6. Отличие в том, что
для анимации каждой фигуры используется свой поток.

Запись выполнения программы: https://drive.google.com/file/d/1uKCHQHedlVOYhQBPlyPYvheH9GbXFT1O/view?usp=sharing
